import { BelongsToManyOptions, BelongsToOptions, DestroyOptions, FindOptions, HasManyOptions, HasOneOptions, ModelAttributes, ModelOptions, UpdateOptions } from "@sequelize/core";
import { SequelizeConnection } from "./SequelizeConnection";
export declare interface ModelDefinition {
    name: string;
    attributes: ModelAttributes;
    options?: ModelOptions;
}
export declare class SequelizeModelManager<S> {
    private definition;
    model: any;
    constructor(definition: ModelDefinition);
    define(connection: SequelizeConnection): Promise<import("@sequelize/core").ModelStatic<import("@sequelize/core").Model<any, any>>>;
    sync(syncOptions?: any): any;
    create(values: S): any;
    bulkCreate(values: S[]): any;
    findAll(options?: FindOptions): any;
    findAndCountAll(options?: FindOptions): any;
    update(values: {
        [x: string]: any;
    }, options: UpdateOptions): any;
    destroy(options?: DestroyOptions): any;
    hasOne(manager: SequelizeModelManager<any>, options?: HasOneOptions<string, string>): any;
    hasMany(manager: SequelizeModelManager<any>, options?: HasManyOptions<string, string>): any;
    belongsTo(manager: SequelizeModelManager<any>, options?: BelongsToOptions<string, string>): any;
    belongsToMany(manager: SequelizeModelManager<any>, options?: BelongsToManyOptions): any;
}
