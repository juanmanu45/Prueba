"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequelizeModelManager = void 0;
class SequelizeModelManager {
    constructor(definition) {
        this.definition = definition;
    }
    define(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            let model = yield connection.define(this.definition.name, this.definition.attributes, this.definition.options);
            this.model = model;
            return model;
        });
    }
    sync(syncOptions) {
        return this.model.sync(syncOptions);
    }
    create(values) {
        return this.model.create(values);
    }
    bulkCreate(values) {
        return this.model.bulkCreate(values);
    }
    findAll(options) {
        return this.model.findAll(options);
    }
    findAndCountAll(options) {
        return this.model.findAndCountAll(options);
    }
    update(values, options) {
        return this.model.update(values, options);
    }
    destroy(options) {
        return this.model.destroy(options);
    }
    hasOne(manager, options) {
        return this.model.hasOne(manager.model, options);
    }
    hasMany(manager, options) {
        return this.model.hasMany(manager.model, options);
    }
    belongsTo(manager, options) {
        return this.model.belongsTo(manager.model, options);
    }
    belongsToMany(manager, options) {
        return this.model.belongsToMany(manager.model, options);
    }
}
exports.SequelizeModelManager = SequelizeModelManager;
//# sourceMappingURL=SequelizeModelManager.js.map