"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongooseModelManager = void 0;
const mongoose_1 = require("mongoose");
class MongooseModelManager {
    constructor(collection, definition, options) {
        this.collection = collection;
        let schema = new mongoose_1.Schema(definition, options);
        this.model = (0, mongoose_1.model)(collection, schema);
    }
    create(datum) {
        return __awaiter(this, void 0, void 0, function* () {
            let token = yield new this.model(datum);
            return token.save();
        });
    }
    createMany(data) {
        let writes = [];
        for (let datum of data) {
            writes.push({
                insertOne: {
                    document: datum
                }
            });
        }
        return this.model.bulkWrite(writes);
    }
    exists(filter) {
        return this.model.exists(filter);
    }
    find(filter) {
        return this.model.findOne(filter);
    }
    findMany(filter) {
        return this.model.find(filter);
    }
    batch(filter, from, size) {
        return this.model.find(filter).skip(from).limit(size);
    }
    updateOne(filter, data) {
        return this.model.updateOne(filter, data);
    }
    bulkWrite(writes, options) {
        return this.model.bulkWrite(writes, options);
    }
    delete(filter) {
        return this.model.deleteOne(filter);
    }
    deleteMany(filter) {
        return this.model.deleteMany(filter);
    }
    countDocuments(filter) {
        return this.model.countDocuments(filter);
    }
}
exports.MongooseModelManager = MongooseModelManager;
//# sourceMappingURL=MongooseModelManager.js.map