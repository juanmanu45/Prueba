"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestAxiosCall = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_retry_1 = __importDefault(require("axios-retry"));
(0, axios_retry_1.default)(axios_1.default, { retries: 3, retryDelay: (retryCount) => { return 2000; } });
class RequestAxiosCall {
    static get(url, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                axios_1.default.get(url, config !== null && config !== void 0 ? config : { headers: { 'Content-Type': 'application/json' } })
                    .then(response => { resolve(response.data); })
                    .catch(err => { reject(err); });
            });
        });
    }
    static post(url, body, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                axios_1.default.post(url, body, config !== null && config !== void 0 ? config : { headers: { 'Content-Type': 'application/json' } })
                    .then(response => { resolve(response.data); })
                    .catch(err => { reject(err); });
            });
        });
    }
    static put(url, body, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                axios_1.default.put(url, body, config !== null && config !== void 0 ? config : { headers: { 'Content-Type': 'application/json' } })
                    .then(response => { resolve(response.data); })
                    .catch(err => { reject(err); });
            });
        });
    }
    static delete(url, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                axios_1.default.delete(url, config !== null && config !== void 0 ? config : { headers: { 'Content-Type': 'application/json' } })
                    .then(response => { resolve(response.data); })
                    .catch(err => { reject(err); });
            });
        });
    }
}
exports.RequestAxiosCall = RequestAxiosCall;
//# sourceMappingURL=RequestAxiosCall.js.map