import { Express, Request, Response, Router } from 'express';
import { ServerSentEventsManager } from './channel/ServerSentEventsManager';
import { DocDetails } from './APIRequestBuilder';
export declare enum RequestMethod {
    GET = "GET",
    POST = "POST",
    PUT = "PUT",
    DELETE = "DELETE"
}
export declare enum RequestContext {
    BODY = "body",
    HEADERS = "headers",
    PARAMS = "params",
    QUERY = "query"
}
export declare enum RequestParameterType {
    STRING = "string",
    NUMBER = "number",
    BOOLEAN = "boolean",
    OBJECT = "object"
}
export declare interface IProperties {
    name: string;
    type: RequestParameterType;
}
export declare interface IMissing {
    missing: string[];
    wrongType: string[];
}
export declare interface GroupedParameters {
    context: RequestContext;
    properties: IProperties[];
}
export declare interface APIRequestConfig {
    path: string;
    params: GroupedParameters[];
    details?: DocDetails;
}
export declare abstract class APIRequest {
    method: RequestMethod;
    path: string;
    details?: DocDetails;
    protected params: GroupedParameters[];
    protected bodyParams: GroupedParameters[];
    constructor(method: RequestMethod, config: APIRequestConfig);
    abstract addToApp(app: Express): void;
    abstract addToRouter(router: Router): void;
    abstract apply(req: Request, res: Response): Promise<any>;
    getRequestDetails(): {
        path: string;
        method: RequestMethod;
        params: GroupedParameters[];
        details: DocDetails | undefined;
        bodyParams: GroupedParameters[];
    };
    process(req: Request, res: Response): Promise<any>;
    static buildKey(req: Request): string;
    private checkParameters;
    private checkValuesPropertyParameters;
    private hasValidValuesProperty;
    private checkItem;
    private buildResponseMessage;
    private buildMissingParametersMessage;
    private buildMessage;
    private findMissingParameters;
    protected openSentServerEvents(res: Response): ServerSentEventsManager;
}
