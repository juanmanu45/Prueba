"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIService = exports.ITRMAPIServiceGlobal = void 0;
const express_1 = __importDefault(require("express"));
const DocumentationRequest_1 = require("./request/docs/DocumentationRequest");
var ITRMAPIServiceGlobal;
(function (ITRMAPIServiceGlobal) {
    ITRMAPIServiceGlobal.memory = {};
    ITRMAPIServiceGlobal.service = undefined;
    ITRMAPIServiceGlobal.requests = {};
    ITRMAPIServiceGlobal.routers = {};
    ITRMAPIServiceGlobal.whitelist = [];
    ITRMAPIServiceGlobal.tools = {};
})(ITRMAPIServiceGlobal || (exports.ITRMAPIServiceGlobal = ITRMAPIServiceGlobal = {}));
class APIService {
    constructor(config) {
        this.server = undefined;
        this.app = (0, express_1.default)();
        this.name = config.name;
        this.port = config.port;
        this.config = config.express;
    }
    init() {
        ITRMAPIServiceGlobal.service = this;
        this.config.apply(this.app);
        this.app.get('/', (req, res) => {
            return res.send('Server working!');
        });
    }
    addRouter(router) {
        ITRMAPIServiceGlobal.routers[router.path] = router;
        this.app.use(router.path, router.router);
    }
    addRequest(request) {
        ITRMAPIServiceGlobal.requests[request.method + "_" + request.path] = request;
        request.addToApp(this.app);
    }
    getServerInformation() {
        return {
            name: this.name,
            port: this.port,
            routers: ITRMAPIServiceGlobal.routers,
            requests: ITRMAPIServiceGlobal.requests
        };
    }
    enableDocumentation() {
        const swaggerUi = require('swagger-ui-express');
        const documentationRequest = new DocumentationRequest_1.DocumentationRequest();
        this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(documentationRequest.init()));
    }
    run(init) {
        return new Promise((resolve, reject) => {
            this.server = this.app.listen(this.port, () => __awaiter(this, void 0, void 0, function* () {
                console.log(`⚡️[server]: Server is running at http://localhost:${this.port}`);
                try {
                    yield init();
                    resolve({ status: 'Ok', message: 'Server has been Initialized' });
                }
                catch (err) {
                    reject({
                        status: 'Error',
                        message: 'An error has ocurred in the initialization function',
                        error: err
                    });
                }
            }));
        });
    }
    close(finish) {
        return new Promise((resolve, reject) => {
            this.server.close((err) => __awaiter(this, void 0, void 0, function* () {
                if (err)
                    reject({
                        status: 'Error',
                        message: 'An error has ocurred when closing Server',
                        error: err
                    });
                try {
                    yield finish();
                    resolve({
                        status: 'Ok',
                        message: 'Server has been closed'
                    });
                }
                catch (err) {
                    reject({
                        status: 'Error',
                        message: 'An error has ocurred in the closing function',
                        error: err
                    });
                }
            }));
        });
    }
}
exports.APIService = APIService;
//# sourceMappingURL=APIService.js.map