import { Request, Response, NextFunction } from "express";
export declare interface APICheckResult {
    approved: boolean;
    payload?: any;
    rejection?: {
        code: number;
        payload: any;
    };
}
export declare interface APICheckConfig {
    check: string;
}
export interface APICheck {
    getConfig(): APICheckConfig;
    apply(config: APICheckConfig, req: Request): PromiseLike<APICheckResult>;
}
export interface Checkable {
    addCheck(check: APICheck): void;
    check(req: Request, res: Response, next: NextFunction): PromiseLike<void | Response>;
}
export declare class APIChecker {
    private checks;
    addCheck(check: APICheck): void;
    applyChecks(req: Request): Promise<APICheckResult>;
    reject(res: Response, result: APICheckResult): Response<any, Record<string, any>>;
}
