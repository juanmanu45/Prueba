"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckableAPIRouter = void 0;
const APIRouter_1 = require("../APIRouter");
const APIService_1 = require("../APIService");
const APIChecker_1 = require("./APIChecker");
class CheckableAPIRouter extends APIRouter_1.APIRouter {
    constructor(path, options) {
        super(path, options);
        this.checker = new APIChecker_1.APIChecker();
    }
    init() {
        this.router.use(this.check);
    }
    addCheck(checker) {
        this.checker.addCheck(checker);
    }
    check(req, res, next) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let route = APIService_1.ITRMAPIServiceGlobal.routers[req.baseUrl];
                route.setHeaders(res);
                let result = yield route.checker.applyChecks(req);
                if (result.approved)
                    return route.runMiddleware(req, res, next);
                return route.checker.reject(res, result);
            }
            catch (error) {
                return yield res.status((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 500).json({
                    type: 'InternalRouterCheckError',
                    error: 'An error has ocurred when runing the checks for the router',
                    payload: (_d = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.data) !== null && _d !== void 0 ? _d : error
                });
            }
        });
    }
}
exports.CheckableAPIRouter = CheckableAPIRouter;
//# sourceMappingURL=CheckableAPIRouter.js.map