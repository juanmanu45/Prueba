"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckableAPIRequest = void 0;
const APIRequest_1 = require("../APIRequest");
const APIService_1 = require("../APIService");
const APIChecker_1 = require("./APIChecker");
class CheckableAPIRequest extends APIRequest_1.APIRequest {
    constructor(method, config) {
        super(method, config);
        this.checker = new APIChecker_1.APIChecker();
    }
    addCheck(check) {
        this.checker.addCheck(check);
    }
    check(req, res, next) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let request = APIService_1.ITRMAPIServiceGlobal.requests[APIRequest_1.APIRequest.buildKey(req)];
                let result = yield request.checker.applyChecks(req);
                if (result.approved)
                    return next();
                return request.checker.reject(res, result);
            }
            catch (error) {
                return yield res.status((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 500).json({
                    type: 'InternalRequestCheckError',
                    error: 'An error has ocurred when runing the checks for the request',
                    payload: (_d = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.data) !== null && _d !== void 0 ? _d : error
                });
            }
        });
    }
}
exports.CheckableAPIRequest = CheckableAPIRequest;
//# sourceMappingURL=CheckableAPIRequest.js.map